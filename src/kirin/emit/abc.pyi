from typing import TypeVar
from dataclasses import field, dataclass

from kirin import ir, types, interp

ValueType = TypeVar("ValueType")

@dataclass
class EmitFrame(interp.Frame[ValueType]):
    block_ref: dict[ir.Block, ValueType] = field(default_factory=dict)

FrameType = TypeVar("FrameType", bound=EmitFrame)

class EmitABC(interp.BaseInterpreter[FrameType, ValueType]):
    def emit(self, code: ir.Statement) -> ValueType: ...
    def emit_attribute(self, attr: ir.Attribute) -> ValueType: ...
    def emit_type_Any(self, attr: types.AnyType) -> ValueType: ...
    def emit_type_Bottom(self, attr: types.BottomType) -> ValueType: ...
    def emit_type_Literal(self, attr: types.Literal) -> ValueType: ...
    def emit_type_Union(self, attr: types.Union) -> ValueType: ...
    def emit_type_TypeVar(self, attr: types.TypeVar) -> ValueType: ...
    def emit_type_Vararg(self, attr: types.Vararg) -> ValueType: ...
    def emit_type_Generic(self, attr: types.Generic) -> ValueType: ...
    def emit_type_PyClass(self, attr: types.PyClass) -> ValueType: ...
    def emit_type_PyAttr(self, attr: ir.PyAttr) -> ValueType: ...
    def emit_attribute_fallback(self, attr: ir.Attribute) -> ValueType: ...
