import ast
import sys
from typing import TypeAlias

from kirin.ir import Method, SSAValue
from kirin.lowering2.state import State

Result: TypeAlias = SSAValue | None

class FromPythonAST:
    @property
    def names(self) -> list[str]: ...
    def lower(self, state: State, node: ast.AST) -> Result: ...
    def unreachable(self, state: State, node: ast.AST) -> Result: ...
    def lower_Module(self, state: State, node: ast.Module) -> Result: ...
    def lower_Interactive(self, state: State, node: ast.Interactive) -> Result: ...
    def lower_Expression(self, state: State, node: ast.Expression) -> Result: ...
    def lower_FunctionDef(self, state: State, node: ast.FunctionDef) -> Result: ...
    def lower_AsyncFunctionDef(
        self, state: State, node: ast.AsyncFunctionDef
    ) -> Result: ...
    def lower_ClassDef(self, state: State, node: ast.ClassDef) -> Result: ...
    def lower_Return(self, state: State, node: ast.Return) -> Result: ...
    def lower_Delete(self, state: State, node: ast.Delete) -> Result: ...
    def lower_Assign(self, state: State, node: ast.Assign) -> Result: ...
    def lower_AugAssign(self, state: State, node: ast.AugAssign) -> Result: ...
    def lower_AnnAssign(self, state: State, node: ast.AnnAssign) -> Result: ...
    def lower_For(self, state: State, node: ast.For) -> Result: ...
    def lower_AsyncFor(self, state: State, node: ast.AsyncFor) -> Result: ...
    def lower_While(self, state: State, node: ast.While) -> Result: ...
    def lower_If(self, state: State, node: ast.If) -> Result: ...
    def lower_With(self, state: State, node: ast.With) -> Result: ...
    def lower_AsyncWith(self, state: State, node: ast.AsyncWith) -> Result: ...
    def lower_Raise(self, state: State, node: ast.Raise) -> Result: ...
    def lower_Try(self, state: State, node: ast.Try) -> Result: ...
    def lower_Assert(self, state: State, node: ast.Assert) -> Result: ...
    def lower_Import(self, state: State, node: ast.Import) -> Result: ...
    def lower_ImportFrom(self, state: State, node: ast.ImportFrom) -> Result: ...
    def lower_Global(self, state: State, node: ast.Global) -> Result: ...
    def lower_Nonlocal(self, state: State, node: ast.Nonlocal) -> Result: ...
    def lower_Expr(self, state: State, node: ast.Expr) -> Result: ...
    def lower_Pass(self, state: State, node: ast.Pass) -> Result: ...
    def lower_Break(self, state: State, node: ast.Break) -> Result: ...
    def lower_Continue(self, state: State, node: ast.Continue) -> Result: ...
    def lower_Slice(self, state: State, node: ast.Slice) -> Result: ...
    def lower_BoolOp(self, state: State, node: ast.BoolOp) -> Result: ...
    def lower_BinOp(self, state: State, node: ast.BinOp) -> Result: ...
    def lower_UnaryOp(self, state: State, node: ast.UnaryOp) -> Result: ...
    def lower_Lambda(self, state: State, node: ast.Lambda) -> Result: ...
    def lower_IfExp(self, state: State, node: ast.IfExp) -> Result: ...
    def lower_Dict(self, state: State, node: ast.Dict) -> Result: ...
    def lower_Set(self, state: State, node: ast.Set) -> Result: ...
    def lower_ListComp(self, state: State, node: ast.ListComp) -> Result: ...
    def lower_SetComp(self, state: State, node: ast.SetComp) -> Result: ...
    def lower_DictComp(self, state: State, node: ast.DictComp) -> Result: ...
    def lower_GeneratorExp(self, state: State, node: ast.GeneratorExp) -> Result: ...
    def lower_Await(self, state: State, node: ast.Await) -> Result: ...
    def lower_Yield(self, state: State, node: ast.Yield) -> Result: ...
    def lower_YieldFrom(self, state: State, node: ast.YieldFrom) -> Result: ...
    def lower_Compare(self, state: State, node: ast.Compare) -> Result: ...
    def lower_Call(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_builtins(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_global_method(
        self, state: State, method: Method, node: ast.Call
    ) -> Result: ...
    def lower_Call_statement(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_slice(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_range(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_len(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_iter(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_next(self, state: State, node: ast.Call) -> Result: ...
    def lower_Call_local(
        self, state: State, callee: SSAValue, node: ast.Call
    ) -> Result: ...
    def lower_FormattedValue(
        self, state: State, node: ast.FormattedValue
    ) -> Result: ...
    def lower_JoinedStr(self, state: State, node: ast.JoinedStr) -> Result: ...
    def lower_Constant(self, state: State, node: ast.Constant) -> Result: ...
    def lower_NamedExpr(self, state: State, node: ast.NamedExpr) -> Result: ...
    def lower_TypeIgnore(self, state: State, node: ast.TypeIgnore) -> Result: ...
    def lower_Attribute(self, state: State, node: ast.Attribute) -> Result: ...
    def lower_Subscript(self, state: State, node: ast.Subscript) -> Result: ...
    def lower_Starred(self, state: State, node: ast.Starred) -> Result: ...
    def lower_Name(self, state: State, node: ast.Name) -> Result: ...
    def lower_List(self, state: State, node: ast.List) -> Result: ...
    def lower_Tuple(self, state: State, node: ast.Tuple) -> Result: ...
    def lower_Del(self, state: State, node: ast.Del) -> Result: ...
    def lower_Load(self, state: State, node: ast.Load) -> Result: ...
    def lower_Store(self, state: State, node: ast.Store) -> Result: ...
    def lower_And(self, state: State, node: ast.And) -> Result: ...
    def lower_Or(self, state: State, node: ast.Or) -> Result: ...
    def lower_Add(self, state: State, node: ast.Add) -> Result: ...
    def lower_BitAnd(self, state: State, node: ast.BitAnd) -> Result: ...
    def lower_BitOr(self, state: State, node: ast.BitOr) -> Result: ...
    def lower_BitXor(self, state: State, node: ast.BitXor) -> Result: ...
    def lower_Div(self, state: State, node: ast.Div) -> Result: ...
    def lower_FloorDiv(self, state: State, node: ast.FloorDiv) -> Result: ...
    def lower_LShift(self, state: State, node: ast.LShift) -> Result: ...
    def lower_Mod(self, state: State, node: ast.Mod) -> Result: ...
    def lower_Mult(self, state: State, node: ast.Mult) -> Result: ...
    def lower_MatMult(self, state: State, node: ast.MatMult) -> Result: ...
    def lower_Pow(self, state: State, node: ast.Pow) -> Result: ...
    def lower_RShift(self, state: State, node: ast.RShift) -> Result: ...
    def lower_Sub(self, state: State, node: ast.Sub) -> Result: ...
    def lower_Invert(self, state: State, node: ast.Invert) -> Result: ...
    def lower_Not(self, state: State, node: ast.Not) -> Result: ...
    def lower_UAdd(self, state: State, node: ast.UAdd) -> Result: ...
    def lower_USub(self, state: State, node: ast.USub) -> Result: ...
    def lower_Eq(self, state: State, node: ast.Eq) -> Result: ...
    def lower_Gt(self, state: State, node: ast.Gt) -> Result: ...
    def lower_GtE(self, state: State, node: ast.GtE) -> Result: ...
    def lower_In(self, state: State, node: ast.In) -> Result: ...
    def lower_Is(self, state: State, node: ast.Is) -> Result: ...
    def lower_IsNot(self, state: State, node: ast.IsNot) -> Result: ...
    def lower_Lt(self, state: State, node: ast.Lt) -> Result: ...
    def lower_LtE(self, state: State, node: ast.LtE) -> Result: ...
    def lower_NotEq(self, state: State, node: ast.NotEq) -> Result: ...
    def lower_NotIn(self, state: State, node: ast.NotIn) -> Result: ...
    def lower_comprehension(self, state: State, node: ast.comprehension) -> Result: ...
    def lower_ExceptHandler(self, state: State, node: ast.ExceptHandler) -> Result: ...
    def lower_arguments(self, state: State, node: ast.arguments) -> Result: ...
    def lower_arg(self, state: State, node: ast.arg) -> Result: ...
    def lower_keyword(self, state: State, node: ast.keyword) -> Result: ...
    def lower_alias(self, state: State, node: ast.alias) -> Result: ...
    def lower_withitem(self, state: State, node: ast.withitem) -> Result: ...
    if sys.version_info >= (3, 10):
        def lower_Match(self, state: State, node: ast.Match) -> Result: ...
        def lower_match_case(self, state: State, node: ast.match_case) -> Result: ...
        def lower_MatchValue(self, state: State, node: ast.MatchValue) -> Result: ...
        def lower_MatchSequence(
            self, state: State, node: ast.MatchSequence
        ) -> Result: ...
        def lower_MatchSingleton(
            self, state: State, node: ast.MatchSingleton
        ) -> Result: ...
        def lower_MatchStar(self, state: State, node: ast.MatchStar) -> Result: ...
        def lower_MatchMapping(
            self, state: State, node: ast.MatchMapping
        ) -> Result: ...
        def lower_MatchClass(self, state: State, node: ast.MatchClass) -> Result: ...
        def lower_MatchAs(self, state: State, node: ast.MatchAs) -> Result: ...
        def lower_MatchOr(self, state: State, node: ast.MatchOr) -> Result: ...

    if sys.version_info >= (3, 11):
        def lower_TryStar(self, state: State, node: ast.TryStar) -> Result: ...

    if sys.version_info >= (3, 12):
        def lower_TypeVar(self, state: State, node: ast.TypeVar) -> Result: ...
        def lower_ParamSpec(self, state: State, node: ast.ParamSpec) -> Result: ...
        def lower_TypeVarTuple(
            self, state: State, node: ast.TypeVarTuple
        ) -> Result: ...
        def lower_TypeAlias(self, state: State, node: ast.TypeAlias) -> Result: ...

class NoSpecialLowering(FromPythonAST):
    pass
